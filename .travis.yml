matrix:
  include:
    - os: linux
      dist: xenial
      sudo: false
      addons:
        apt:
          sources:
          - sourceline: 'deb http://apt.llvm.org/xenial/ llvm-toolchain-xenial-5.0 main'
            key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
          packages:
          - git
          - ninja-build
          - cmake
          - llvm-5.0
          - clang-5.0
      env: MATRIX_EVAL="CC=clang-5.0 CXX=clang++-5.0"
    - os: osx
      osx_image: xcode9.4
    - os: windows

env:
  global:
  - RELEASE_BRANCH=master
  - RELEASE_REPO=jamsilva/netcoredbg
  - secure: "i4S1tInRZp+jbJnNaHOXGfdlUZeOGOBMIAVA1c9zA94tTCOlUItWiXEF+WM+TjDWA5gLnBNi/3dAUVRrQ8h4wSukVIS3mcYwybGkWZfrVJWJmX7axEyak0wUbspvlSnW+rrbqR1rrKqRzoh66avG3hi+AIeWACqrI9zDtU60r7+RKAPl7ItHjtbX4W4zRLFLvQHp3+r4k7z46qh2hGleGuMkB0cEXb2te159oenfLbwcRprzmw1otnwhINnwf9JY4QZCAap6o/Du4yKFlMFVQWOcnx+oR7SEapU6hHz0gtfl1kDYo38THmLcSNcu84+vVjC4Uv/Cyr6IqL+A2AFfTjneJA4D8+rjhRV2N2125tJus3sNNSa+aHM5gqGW+bPmM1lwWVVFOuKHKqBo8eDxOleQdgLv3OVMnxcGZePHLSDP2NM9mnUmZ6iWBScqsEE9gccXqMXwzHuu82hfoB2MYniPbf+TxhOiSOFW9vv28qW4AK58dDEb0GoU0M7r0S7lGtiLKSQTgP6kD2ApRBplspCK+aTc0ldmqNnjDwsSLCscnUzLfGWW2AANPpxuRex5AsqyZHqnW3Uwf/a84pLEIKEYUqdtoFl7xLL2xEcKDHvuRV5DfIByfeNlH2FdAfksDLkbZlXxhZOSFxFQZtXVkkx8HEBGctbM0HVIdQNEg8A="
branches:
  except:
    - latest

language: cpp

before_install:
  - |
      if [ ${TRAVIS_OS_NAME} = 'osx' ]; then
        HOMEBREW_NO_AUTO_UPDATE=1 brew install ninja
      fi

script:
  - |
      eval "${MATRIX_EVAL}"
      mkdir build && cd build
      if [ ${TRAVIS_OS_NAME} = 'windows' ]; then
        powershell -Command "Set-ExecutionPolicy Unrestricted"
        cmake .. -G "Visual Studio 15 2017 Win64" -DCMAKE_INSTALL_PREFIX=$PWD/../bin
        cmake --build . --config Release --target install
      else
        cmake .. -G Ninja -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=$PWD/../bin
        ninja && ninja install
      fi
      cd ..

before_deploy:
  - |
      if [ "$TRAVIS_BRANCH" = "$RELEASE_BRANCH" -a "$TRAVIS_PULL_REQUEST" = "false" ]; then
        # Tag last commit as 'latest'.
        git config --local user.name "Travis"
        git config --local user.email "travis@travis-ci.org"

        git remote add release "https://${GITHUB_API_KEY}@github.com/${RELEASE_REPO}.git"

        git push -d release latest
        git tag -d latest
        git tag -a "latest" -m "[Autogenerated] This is the latest version pushed to the ${TRAVIS_BRANCH} branch."
        git push release --tags
        # Prepare files for deployment
        mv bin netcoredbg
        if [ ${TRAVIS_OS_NAME} = 'windows' ]; then
          7z a netcoredbg-win64-${TRAVIS_BRANCH}.zip netcoredbg -tzip -mx=9
        else
          if [ ${TRAVIS_OS_NAME} = 'linux' ]; then
            strip --strip-unneeded netcoredbg/netcoredbg
          elif [ ${TRAVIS_OS_NAME} = 'osx' ]; then
            strip -u -r -x netcoredbg/netcoredbg
          fi
          zip -9 netcoredbg-${TRAVIS_OS_NAME}-${TRAVIS_BRANCH}.zip netcoredbg/*
        fi
      fi

deploy:
  provider: releases
  api_key: $GITHUB_API_KEY
  file:
    - "*.zip"
  file_glob: true
  skip_cleanup: true
  overwrite: true
  on:
    repo: $RELEASE_REPO
    branch: $RELEASE_BRANCH
